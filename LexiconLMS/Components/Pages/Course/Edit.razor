@page "/course/edit"
@inject ICourseService CourseService
@inject NavigationManager NavigationManager
@using LexiconLMS.Core.Entities
@using LexiconLMS.Core.Services
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.EntityFrameworkCore
rendermode InteractiveServer 

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h4>Course</h4>
<hr />
@if (Course is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Course" OnValidSubmit="UpdateCourse" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary />
                <input type="hidden" name="Course.Id" value="@Course.Id" />
                <div class="mb-3">
                    <label for="name" class="form-label">Name:</label>
                    <InputText id="name" @bind-Value="Course.Name" class="form-control" />
                    <ValidationMessage For="() => Course.Name" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="description" class="form-label">Description:</label>
                    <InputText id="description" @bind-Value="Course.Description" class="form-control" />
                    <ValidationMessage For="() => Course.Description" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="startdate" class="form-label">StartDate:</label>
                    <InputDate id="startdate" @bind-Value="Course.StartDate" class="form-control" />
                    <ValidationMessage For="() => Course.StartDate" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="enddate" class="form-label">EndDate:</label>
                    <InputDate id="enddate" @bind-Value="Course.EndDate" class="form-control" />
                    <ValidationMessage For="() => Course.EndDate" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="created" class="form-label">Created:</label>
                    <InputDate id="created" @bind-Value="Course.Created" class="form-control" />
                    <ValidationMessage For="() => Course.Created" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="lastmodified" class="form-label">LastModified:</label>
                    <InputDate id="lastmodified" @bind-Value="Course.LastModified" class="form-control" />
                    <ValidationMessage For="() => Course.LastModified" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/courses">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    public int Id { get; set; }

    [SupplyParameterFromForm]
    public Course? Course { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Course ??= await CourseService.GetCourseAsync(Id);

        if (Course is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    public async Task UpdateCourse()
    {
        try
        {
            await CourseService.UpdateCourseAsync(Course!);

        }
        catch (DbUpdateConcurrencyException)
        {
            if (!await CourseExists(Course!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/courses");
    }

    async Task<bool> CourseExists(int id)
    {
        return await CourseService.GetCourseAsync(id) is not null;
    }
}

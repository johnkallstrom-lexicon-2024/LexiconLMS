@page "/course"
@inject ICourseService CourseService
@rendermode InteractiveServer
@using LexiconLMS.Components.Shared
@using LexiconLMS.Core.Entities
@using LexiconLMS.Core.Services
@inject ICourseService CourseService
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Web

<PageTitle>Index</PageTitle>

<h1>Index</h1>

<p>
    <a href="/course/create">Create New</a>
</p>

@if (courses == null)
{
    <p><em>Loading...</em></p>
}
else if (courses.Any())
{
    <table class="table">
        <thead>
            <tr>
                <th>Course Name</th>
                <th>Description</th>
                <th>Start Date</th>
                <th>Created</th>
                <th>Last Modified</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var course in courses)
            {
                <tr>
                    <td>@course.Name</td>
                    <td>@course.Description</td>
                    <td>@course.StartDate.ToString("yyyy-MM-dd")</td>
                    <td>@course.Created.ToString("yyyy-MM-dd")</td>
                    <td>@course.LastModified?.ToString("yyyy-MM-dd")</td>
                    <td>
                        <a href="@($"course/edit/{course.Id}")">Edit</a> |
                        <a href="@($"course/details/{course.Id}")">Details</a> |
                        <a href="@($"course/delete/{course.Id}")">Delete</a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p><em>There are no courses available.</em></p>
}

@code {
    private IEnumerable<Course>? courses;

    protected override async Task OnInitializedAsync()
    {
        courses = await CourseService.GetCoursesAsync();
    }
}

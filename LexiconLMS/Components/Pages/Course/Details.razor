@page "/course/details/{Id}"
@using LexiconLMS.Core.Entities
@using LexiconLMS.Core.Services
@inject ICourseService CourseService
@inject NavigationManager NavigationManager
@using Microsoft.EntityFrameworkCore
@rendermode InteractiveServer

<PageTitle>Details</PageTitle>

<h1>Details</h1>

<div>
    <h4>Course</h4>
    <hr />
    @if (Course is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Name</dt>
            <dd class="col-sm-10">@Course.Name</dd>
            <dt class="col-sm-2">Description</dt>
            <dd class="col-sm-10">@Course.Description</dd>
            <dt class="col-sm-2">StartDate</dt>
            <dd class="col-sm-10">@Course.StartDate</dd>
            <dt class="col-sm-2">EndDate</dt>
            <dd class="col-sm-10">@Course.EndDate</dd>
            <dt class="col-sm-2">Created</dt>
            <dd class="col-sm-10">@Course.Created</dd>
            <dt class="col-sm-2">LastModified</dt>
            <dd class="col-sm-10">@Course.LastModified</dd>
        </dl>
        <div>
            <a href="@($"/Course/edit?id={Course.Id}")">Edit</a> |
            <a href="@($"/Course")">Back to List</a>
        </div>
    }
</div>

@code {

    [Parameter]
    public string? Id { get; set; }

    private Course? Course;

    protected override async Task OnInitializedAsync()
    {
        if (!int.TryParse(Id, out int CourseId))
        {
            NavigationManager.NavigateTo("notfound");
        }

        Course ??= await CourseService.GetCourseAsync(CourseId);

        if (Course is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
}

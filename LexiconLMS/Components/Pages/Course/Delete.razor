@page "/course/delete/{Id}"
@using LexiconLMS.Core.Entities
@inject ICourseService CourseService
@inject NavigationManager NavigationManager
@using LexiconLMS.Core.Services
@using Microsoft.EntityFrameworkCore
@rendermode InteractiveServer

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<h3>Are you sure you want to delete this?</h3>
<div>
    <h4>Course</h4>
    <hr />
    @if (Course is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Name</dt>
            <dd class="col-sm-10">@Course.Name</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Description</dt>
            <dd class="col-sm-10">@Course.Description</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">StartDate</dt>
            <dd class="col-sm-10">@Course.StartDate</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">EndDate</dt>
            <dd class="col-sm-10">@Course.EndDate</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Created</dt>
            <dd class="col-sm-10">@Course.Created</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">LastModified</dt>
            <dd class="col-sm-10">@Course.LastModified</dd>
        </dl>
        <EditForm method="post" Model="Course" OnValidSubmit="DeleteCourse" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(Course is null)">Delete</button> |
            <a href="/course">Back to List</a>
        </EditForm>
    }
</div>

@code {

    [Parameter]
    public string? Id { get; set; }

    private Course? Course = null;

    protected override async Task OnInitializedAsync()
    {
        if (!int.TryParse(Id, out int courseId))
        {
            NavigationManager.NavigateTo("notfound");
        }

        Course ??= await CourseService.GetCourseAsync(courseId);

        if (Course is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    public async Task DeleteCourse()
    {
        await CourseService.DeleteCourseAsync(Course!);
        NavigationManager.NavigateTo("/course");
    }
}

@page "/course/create"
@inject ICourseService CourseService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@using LexiconLMS.Core.Entities
@using LexiconLMS.Core.Services
@using System.ComponentModel.DataAnnotations
@rendermode InteractiveServer
<PageTitle>Course Create</PageTitle>

<h1>Create</h1>

<h4>Course</h4>
<hr />
<div class="row">
    <EditForm Model="@Course" OnValidSubmit="@CreateCourse" Context="editContext">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="form-group">
            <label for="Title" class="col-sm-2">Title</label>
            <InputText id="Title" class="form-control col-sm-10" @bind-Value="Course.Name" />
            <ValidationMessage For="() => Course.Name" class="text-danger" />
        </div>

        <div class="form-group">
            <label for="Description" class="col-sm-2">Description</label>
            <InputText id="Description" class="form-control col-sm-10" @bind-Value="Course.Description" />
            <ValidationMessage For="() => Course.Description" class="text-danger" />
        </div>

        <div class="form-group">
            <label for="StartDate" class="col-sm-2">Start Date</label>
            <InputDate id="StartDate" class="form-control col-sm-10" @bind-Value="Course.StartDate" />
            <ValidationMessage For="() => Course.StartDate" class="text-danger" />
        </div>

        <div class="form-group">
            <label for="EndDate" class="col-sm-2">End Date</label>
            <InputDate id="EndDate" class="form-control col-sm-10" @bind-Value="Course.EndDate" />
            <ValidationMessage For="() => Course.EndDate" class="text-danger" />
        </div>
        <button type="submit" class="btn btn-primary">Create</button>
    </EditForm>
</div>

@code {
    private Course Course = new()
        {
            Name = string.Empty,
            Description = string.Empty,
            StartDate = DateTime.Today,
            EndDate = DateTime.Today.AddDays(1) // Default end date to tomorrow
        };
    private EditContext editContext = null!;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        editContext = new EditContext(Course);
    }

    private async Task CreateCourse()
    {
        var validationResult = await CourseService.ValidateCourseAsync(Course);
        if (validationResult != ValidationResult.Success)
        {
            await JSRuntime.InvokeVoidAsync("alert", validationResult.ErrorMessage);
            return;
        }

        try
        {
            await CourseService.AddCourseAsync(Course);
            NavigationManager.NavigateTo("/course");
        }
        catch (Exception e)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error creating course: {e.Message}");
        }
    }
}
